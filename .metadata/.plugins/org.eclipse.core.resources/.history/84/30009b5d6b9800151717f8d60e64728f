package code;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Transparency;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 * PlaceFollower is an event handler that was added to the JButtons in the follower frame. Ideally, it gets the image
 * of the Tile that was just placed, gets the position at which the player wants to place a follower and then overlays
 * the image of a follower at that position onto the image of the tile and sets that image to the JButton onto which 
 * a tile was just placed. Unfortunately, we have been unable to get BufferedImages to layer on top of each other. 
 * The code that is commented out was what we were attempting to do, but it results in the image disappearing from
 * the JButton. If we change the static variable between Transparency.BITMASK, BufferedImage.TYPE_INT_ARGB and 
 * BufferedImag.TYPE_INT_RGB we get different results, but none of them overlay any images successfully. With this 
 * code commented out, this ActionListener simply closes the JFrame when a button is clicked.
 * 
 * @author Katie
 *
 */
public class PlaceFollower implements ActionListener {
/**
 * Variables that hold references to the View, Board, JButton that a tile was just placed on and the follower JFrame.
 */
	private View _view;
	private JButton _button;
	private JFrame _frame;
	private Board _board;
	//private Color _color; //?? need to give a COLOR to each player , need to get turn number 
	private int _meeplePosition; //need to get/set Meeple (x,y) coords for image tile 
	
	
	

	/**
	 * The constructor initializes all of the instance variables to objects that are passed in.
	 * 
	 * @param v		The View
	 * @param b		The JButton on which a tile was just placed
	 * @param f		The frame that popped up to display the JButtons to which this ActionListener was added
	 * @param bd	The Board
	 */
	public PlaceFollower(View v, JButton b, JFrame f, Board bd){
		_view = v;
		_button = b;
		_frame = f;
		_board = bd;
		
	}
	
	/**
	 * This method is run whenever a button that this ActionListener is added to is clicked. It should overlay the appropriate
	 * image of a follower onto the image of the tile that was just placed. However, it simply places a follower on the Tile in 
	 * the Board and closes the JFrame of the button that was just clicked.
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		int i = _view.getFollowerPosition((JButton) e.getSource());
		_board.followerOnTile(i);
		
		// 1. get imageIcon of tile 
		 ImageIcon img = _board.getTile().getImage(); 
		// 2. create buffered image from imageIcon
		BufferedImage buffFollower = new BufferedImage(img.getIconWidth()/2,img.getIconHeight()/2,BufferedImage.TYPE_INT_RGB); 
		// 3. create graphics 2D object 
		 Graphics2D buffGraphics = (Graphics2D) buffFollower.createGraphics();
		// 4. set color of 2D graphics (each player to have a color) 
		 buffGraphics.setColor(getColor());
		// 5. fillRect (Pixel location of meeple(x,y), size of rect) This will modify the buffered image
		buffGraphics.fillRect(position(i)[0], position(i)[1], 8, 8);
		buffGraphics.dispose();
		// 6. create new imageicon(buffered image) 
		ImageIcon meepleImage = new ImageIcon(buffFollower);
		// 7. set image of Jbutton with new imageIcon 
		_button.setIcon(meepleImage);
		_board.getTile().setImage(meepleImage);
		_frame.setVisible(false);
	}
	
	
	//create method to get xcoord,ycoord from arrayList 
	// i corresponds to follower position and the coord in array
	/**
	 * @param i , follower position from 0 to 12
	 * @return Returns an array of x and y coordinate pair corresponding the the meeple position in terms of pixels on the tile. 
	 */
	public int[] position(int i){
	int xcoord = View.meeplePosition[i][0];
	int ycoord = View.meeplePosition[i][1];
	int[] position = {xcoord,ycoord};
	return position;
	
	}
	
	
	/**
	 * @return Returns the color of the current player for meeple placement. 
	 */
	public Color getColor() {
		int p = PlayerTurns.getPlayerID(); 
				if(p == 0){
					return Color.BLUE;
				}
				if (p == 1){
					return Color.RED;
				}
				if (p == 2){
					return Color.green;
				}
				if (p == 3) {
					return Color.YELLOW;
				}
				else  {
					return Color.BLACK;
				}
				
	}
 
	
	
}
